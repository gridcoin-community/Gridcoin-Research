<?xml version="1.0"?>
<doc>
<assembly>
<name>
boinc
</name>
</assembly>
<members>
<member name="P:boinc.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:boinc.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradient">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradient75">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradient751">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradient752">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradient753">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.gradientmiddle">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.GradientU">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.mining">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:boinc.My.Resources.Resources.splash">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:boinc.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_ACCEPTFILES">
	<summary>
 Specifies that a window created with this style accepts drag-drop files.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_APPWINDOW">
	<summary>
 Forces a top-level window onto the taskbar when the window is visible.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_CLIENTEDGE">
	<summary>
 Specifies that a window has a border with a sunken edge.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_COMPOSITED">
	<summary>
 Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_CONTEXTHELP">
	<summary>
 Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
 WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_CONTROLPARENT">
	<summary>
 The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_DLGMODALFRAME">
	<summary>
 Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_LAYERED">
	<summary>
 Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_LAYOUTRTL">
	<summary>
 Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_LEFT">
	<summary>
 Creates a window that has generic left-aligned properties. This is the default.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
	<summary>
 If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_LTRREADING">
	<summary>
 The window text is displayed using left-to-right reading-order properties. This is the default.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_MDICHILD">
	<summary>
 Creates a multiple-document interface (MDI) child window.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_NOACTIVATE">
	<summary>
 Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
 To activate the window, use the SetActiveWindow or SetForegroundWindow function.
 The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
	<summary>
 Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
	<summary>
 Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
	<summary>
 Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_PALETTEWINDOW">
	<summary>
 Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_RIGHT">
	<summary>
 The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
 Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
	<summary>
 Vertical scroll bar (if present) is to the right of the client area. This is the default.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_RTLREADING">
	<summary>
 If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_STATICEDGE">
	<summary>
 Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_TOOLWINDOW">
	<summary>
 Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_TOPMOST">
	<summary>
 Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the etWindowPos function.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_TRANSPARENT">
	<summary>
 Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
 To achieve transparency without these restrictions, use the SetWindowRgn function.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStylesEx.WS_EX_WINDOWEDGE">
	<summary>
 Specifies that a window has a border with a raised edge.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_BORDER">
	<summary>The window has a thin-line border.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_CAPTION">
	<summary>The window has a title bar (includes the WS_BORDER style).</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_CHILD">
	<summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_CLIPCHILDREN">
	<summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_CLIPSIBLINGS">
	<summary>
 Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
 If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_DISABLED">
	<summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_DLGFRAME">
	<summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_GROUP">
	<summary>
 The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
 The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong
  function.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_HSCROLL">
	<summary>The window has a horizontal scroll bar.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_MAXIMIZE">
	<summary>The window is initially maximized.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_MAXIMIZEBOX">
	<summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_MINIMIZE">
	<summary>The window is initially minimized.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_MINIMIZEBOX">
	<summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_OVERLAPPED">
	<summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_OVERLAPPEDWINDOW">
	<summary>The window is an overlapped window.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_POPUP">
	<summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_POPUPWINDOW">
	<summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_SIZEFRAME">
	<summary>The window has a sizing border.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_SYSMENU">
	<summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_TABSTOP">
	<summary>
 The window is a control that can receive the keyboard focus when the user presses the TAB key.
 Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the etWindowLong function.
 For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
 </summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_VISIBLE">
	<summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or etWindowPos function.</summary>
</member><member name="F:boinc.modWinAPI.WindowStyles.WS_VSCROLL">
	<summary>The window has a vertical scroll bar.</summary>
</member><member name="T:boinc.Gridcoin.TreeNodeBuilder">
	<summary>
 Builds up a <see cref="T:System.Windows.Forms.TreeNode"/> with the same hierarchy as
 a <see cref="T:OpenPop.Mime.Message"/>.
 
 The root <see cref="T:System.Windows.Forms.TreeNode"/> has the subject as text and has one one child.
 The root has no Tag attribute set.
 
 The children of the root has the MediaType of the <see cref="!:MessagePart"/> as text and the
 MessagePart's children as <see cref="T:System.Windows.Forms.TreeNode"/> children.
 Each <see cref="!:MessagePart"/>
		<see cref="T:System.Windows.Forms.TreeNode"/> has a Tag property set to that <see cref="!:MessagePart"/>
	</summary>
</member><member name="M:boinc.Gridcoin.IAnswerMessageTraverser`1.VisitMessage(OpenPop.Mime.Message)">
	<summary>
 Call this when you want to apply this traverser on a <see cref="T:OpenPop.Mime.Message"/>.
 </summary>
	<param name="message">The <see cref="T:OpenPop.Mime.Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
	<returns>An answer</returns>
</member><member name="M:boinc.Gridcoin.IAnswerMessageTraverser`1.VisitMessagePart(OpenPop.Mime.MessagePart)">
	<summary>
 Call this when you want to apply this traverser on a <see cref="!:MessagePart"/>.
 </summary>
	<param name="messagePart">The <see cref="!:MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
	<returns>An answer</returns>
</member><member name="T:boinc.Gridcoin.IAnswerMessageTraverser`1">
	<summary>
 This interface describes a MessageTraverser which is able to traverse a Message hierarchy structure
 and deliver some answer.
 </summary>
	<typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
</member>
</members>
</doc>