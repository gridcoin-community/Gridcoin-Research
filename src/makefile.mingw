# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

CXX ?= g++

USE_UPNP:=0

UNIX_INCLUDEPATHS?= \
 -I"a:\deps-master\boost_1_55_0" \
 -I"a:\deps-master\db" \
 -I"a:\deps-master\ssl"

UNIX_LIBPATHS?= \
 -L"a:\deps-master\boost_1_55_0\stage\lib" \
 -L"a:\deps-master\db" \
 -L"a:\deps-master\ssl"
 
 
 DEPSDIR?=/usr/local
#BOOST_SUFFIX?=-mgw46-mt-sd-1_55
 BOOST_SUFFIX?=-mgw46-mt-1_55
 
 
 
  INCLUDEPATHS_OLD?= \
   -I"$(CURDIR)" \
   -I"$(DEPSDIR)/include" \
   -I"$(DEPSDIR)/include/boost" \
   -I"$(DEPSDIR)/boost_1_55_0/boost"
 
 

 INCLUDEPATHS?= \
  -I"$(CURDIR)" \
  -I"a:\deps-master\ssl" \
  -I"a:\deps-master\db" \
  -I"a:\deps-master\include\boost" \
  -I"a:\deps-master\boost" \
  -I"a:\deps-master\boost_1_55_0" 
 
 LIBPATHS?= \
  -L"$(CURDIR)/leveldb" \
  -L"$(DEPSDIR)/lib"


LIBS_OLD= \
 -l leveldb \
 -l memenv \
 -l boost_system$(BOOST_SUFFIX) \
 -l boost_filesystem$(BOOST_SUFFIX) \
 -l boost_program_options$(BOOST_SUFFIX) \
 -l boost_thread$(BOOST_SUFFIX) \
 -l boost_chrono$(BOOST_SUFFIX) \
 -l db_cxx \
 -l ssl \
 -l crypto


LIBS= \
 -l leveldb \
 -l boost_system-mgw46-mt-1_55 \
 -l boost_filesystem-mgw46-mt-1_55 \
 -l boost_program_options-mgw46-mt-1_55 \
 -l boost_thread-mgw46-mt-1_55 \
 -l boost_chrono-mgw46-mt-1_55 \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l curl \
 -l zip


DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g
CXXFLAGS=${ADDITIONALCXXFLAGS} -std=c++11 -mthreads -O3 -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
 INCLUDEPATHS += -I"a:\deps-master\miniupnpc-1.6"
 LIBPATHS += -L"a:\deps-master\miniupnpc-1.6"
 
 
 LIBS += -l miniupnpc -l iphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    leveldb/libleveldb.a \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/cpid.o \
    obj/upgrader.o

all: gridcoinresearchd.exe


#
# LevelDB support
#


LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o


#leveldb/libleveldb.a:
#cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(CXXFLAGS)" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..

#oldcd leveldb; make; cd ..
	
	
obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/%.o: %.cpp $(HEADERS)
	g++ -c $(CXXFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

gridcoinresearchd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-del /Q gridcoinresearchd
	-del /Q test_gridcoin
	-del /Q obj\*
	-del /Q obj-test\*
	cd leveldb && $(MAKE) TARGET_OS=NATIVE_WINDOWS clean && cd ..
FORCE:

include Makefile.include.test

