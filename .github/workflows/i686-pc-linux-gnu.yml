name: i686-pc-linux-gnu

on: [push, pull_request]

jobs:
  build:
    env:
      name: build
      MAKEJOBS: -j3
      RUN_TESTS: false
      CHECK_DOC: 0
      BOOST_TEST_RANDOM: 1$GITHUB_RUN_ID
      CCACHE_SIZE: 100M
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: 1
      BASE_OUTDIR: $HOME/out
      SDK_URL: https://bitcoincore.org/depends-sources/sdks
      WINEDEBUG: fixme-all
      HOST: i686-pc-linux-gnu
      PACKAGES: g++-multilib
      DEP_OPTS: NO_QT=1
      GOAL: install
      GRIDCOIN_CONFIG:  --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++
      USE_SHELL: /bin/dash
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      
      - name: cache_ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ github.repository }}-ccache-${{ github.run_id }}
          restore-keys: |
            ${{ github.repository }}-ccache-
      - name: cache_depends_built
        uses: actions/cache@v2
        with:
          path: depends/built
          key: ${{ github.repository }}-depends_built-${{ github.run_id }}
          restore-keys: |
            ${{ github.repository }}-depends_built-
      - name: cache_depends_sdk
        uses: actions/cache@v2
        with:
          path: depends/sdk-sources
          key: ${{ github.repository }}-depends_sdk-${{ github.run_id }}
          restore-keys: |
            ${{ github.repository }}-depends_sdk-

      - name: before_install
        run: |
          export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          sudo apt-get update -q

      - name: install
        run: |
          if [ -n "$DPKG_ADD_ARCH" ]; then sudo dpkg --add-architecture "$DPKG_ADD_ARCH" ; fi
          if [ -n "$PACKAGES" ]; then sudo apt-get update; fi
          if [ -n "$PACKAGES" ]; then sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi

      - name: before_script
        run: |
          sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
          unset CC; unset CXX
          mkdir -p depends/SDKs depends/sdk-sources
          if [ -z "$NO_DEPENDS" ]; then make $MAKEJOBS -C depends HOST=$HOST GCCFLAGS=$GCCFLAGS $DEP_OPTS; fi
          if [ "$NEED_XVFB" = 1 ]; then export DISPLAY=:99.0; /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac; fi

      - name: script
        run: |
          if [ -n "$USE_SHELL" ]; then export CONFIG_SHELL="$USE_SHELL"; fi
          OUTDIR=$BASE_OUTDIR/$GITHUB_RUN_ID-$HOST
          GRIDCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib"
          if [ -z "$NO_DEPENDS" ]; then depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE; fi
          test -n "$USE_SHELL" && eval '"$USE_SHELL" -c "./autogen.sh"' || ./autogen.sh
          mkdir build && cd build
          ../configure --cache-file=config.cache $GRIDCOIN_CONFIG_ALL $GRIDCOIN_CONFIG || ( cat config.log && false)
          make distdir VERSION=$HOST
          cd gridcoin-$HOST
          ./configure --cache-file=../config.cache $GRIDCOIN_CONFIG_ALL $GRIDCOIN_CONFIG || ( cat config.log && false)
          make GCCFLAGS=$GCCFLAGS $MAKEJOBS $GOAL || ( echo "Build failure. Verbose build follows." && make GCCFLAGS=$GCCFLAGS $GOAL V=1 ; false )
          export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib
          if [ "$HOST" = "x86_64-unknown-linux-gnu" ]; then sleep 30 && make $MAKEJOBS check VERBOSE=1; fi
